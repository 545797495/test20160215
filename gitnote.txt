工作区（Working Directory）就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区：
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
git push origin master 推送到远程
 git remote -v 查看远程仓库
 
为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件。
你会问，什么是修改？比如你新增了一行，这就是一个修改，删除了一行，也是一个修改，更改了某些字符，也是一个修改，删了一些又加了一些，也是一个修改，甚至创建一个新文件，也算一个修改。

当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区
所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。

三种回退方式
1.命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况（如何丢弃工作区的修改）
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库（注意是版本库哦）一模一样的状态；（
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。(这句话简单明了就是你在checkout命令时回退到该文件的上一次操作（add或者commit就好）)
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，（注意你会丢失最近一次提交后你修改的内容）
git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令
2.git reset是回退 工作区改的没变 只是暂存区（相当于暂存区回到上一次暂存区，但工作区修改的东西工作区还有 而checkout就都没有了）没保存工作区的东西，
而checkout是工作区或者暂存区丢弃之前的修改 ，工作区或者暂存区回到上一次修改
3.假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？可以回退到上一个版本（$ git reset --hard HEAD^）。
不过，这是有条件的，就是你还没有把自己的本地版本库推送到远程。

git diff 此命令比较的是工作目录(Working tree)和暂存区域快照(index （add的）)之间的差异
也就是修改之后还没有暂存起来的变化内容。
git diff HEAD 是比较 暂存区（add）和 仓库（commit指从暂存区提交到本地仓库的分支）的区别



就回退这块checkout reset 还是有所疑惑